// Importing the database instance from Prisma ORM setup.
import { db } from "../utils/db.server";

// Defining the structure of an Author entity.
export type Author = {
  id: number;
  firstName: string;
  lastName: string;
};

// Function to list all authors from the database.
export const listAuthors = async (): Promise<Author[]> => {
  return db.author.findMany({
    select: {
      id: true,
      firstName: true,
      lastName: true,
    },
  });
};

// Function to retrieve a single author by their ID.
export const getAuthor = async (id: number): Promise<Author | null> => {
  return db.author.findUnique({
    where: {
      id,
    },
    select: {
      id: true,
      firstName: true,
      lastName: true,
    },
  });
};

// Function to create a new author in the database.
// The function omits the 'id' field as it's auto-generated by the database.
export const createAuthors = async (
  author: Omit<Author, "id">
): Promise<Author> => {
  const { firstName, lastName } = author;

  return db.author.create({
    data: {
      firstName,
      lastName,
    },
    select: {
      id: true,
      firstName: true,
      lastName: true,
    },
  });
};

// Function to update an existing author's details.
// It allows partial updates, meaning not all fields need to be provided.
export const updateAuthors = async (
  author: Partial<Omit<Author, "id">>,
  id: number
): Promise<Author> => {
  const { firstName, lastName } = author;

  return db.author.update({
    where: {
      id,
    },
    data: {
      ...(firstName !== undefined && { firstName }),
      ...(lastName !== undefined && { lastName }),
    },
    select: {
      id: true,
      firstName: true,
      lastName: true,
    },
  });
};

// Function to delete an author from the database by their ID.
export const deleteAuthor = async (id: number): Promise<void> => {
  await db.author.delete({
    where: {
      id,
    },
  });
};
